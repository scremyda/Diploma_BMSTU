services:
  scanner:
    build:
      context: ../../
      dockerfile: ./build/compose/scanner/Dockerfile
#      network: host
    depends_on:
      postgres:
        condition: service_healthy
    command: [ "/app/scanner", "-c", "/app/config.yaml" ]
    volumes:
      - ../../scanner/cmd/config.yaml:/app/config.yaml

  alerter:
    build:
      context: ../../
      dockerfile: ./build/compose/alerter/Dockerfile
#      network: host
    depends_on:
      - scanner
    command: [ "/app/alerter", "-c", "/app/config.yaml" ]
    volumes:
      - ../../alerter/cmd/config.yaml:/app/config.yaml
    restart: always

  certer:
    build:
      context: ../../
      dockerfile: ./build/compose/certer/Dockerfile
    depends_on:
      - scanner
    command: [ "/app/certer", "-c", "/app/config.yaml" ]
    volumes:
      - ../../certer/cmd/config.yaml:/app/config.yaml
      - certs:/app/certs

  echo:
    build:
      context: ../../
      dockerfile: ./build/compose/echo/Dockerfile
    ports:
      - "8443:8443"
    volumes:
      - certs:/app/certs

  postgres:
    image: tembo.docker.scarf.sh/tembo/pg17-pgmq:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pgqdb
    ports:
      - "5432:5432"
    volumes:
#      - pgdata:/var/lib/postgresql/14/data
      - ../../init/init_pgq.sql:/docker-entrypoint-initdb.d/init_pgq.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
#  pgdata:
  certs:
